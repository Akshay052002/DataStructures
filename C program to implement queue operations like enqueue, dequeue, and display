#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100
struct Queue {
    int front, rear, size;
    int array[MAX_SIZE];
};
struct Queue* createQueue() {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->front = queue->rear = -1;
    queue->size = 0;
    return queue;
}
int isEmpty(struct Queue* queue) {
    return queue->size == 0;
}
int isFull(struct Queue* queue) {
    return queue->size == MAX_SIZE;
}
void enqueue(struct Queue* queue, int item) {
    if (isFull(queue)) {
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }
    if (isEmpty(queue))
        queue->front = 0;
    queue->rear = (queue->rear + 1) % MAX_SIZE;
    queue->array[queue->rear] = item;
    queue->size++;
}
int dequeue(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;
    }
    int item = queue->array[queue->front];
    queue->front = (queue->front + 1) % MAX_SIZE;
    queue->size--;
    return item;
}
void display(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Queue: ");
    int i;
    for (i = queue->front; i != queue->rear; i = (i + 1) % MAX_SIZE)
        printf("%d, ", queue->array[i]);
    printf("%d\n", queue->array[i]);
}
int main() {
    struct Queue* queue = createQueue();
    enqueue(queue, 10);
    enqueue(queue, 20);
    enqueue(queue, 30);
    display(queue);
    int dequeued_item = dequeue(queue);
    printf("Dequeued item: %d\n", dequeued_item);
    display(queue);
    enqueue(queue, 40);
    display(queue);
    return 0;
}
